# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!


type User
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  cognitoId: String! @index(name: "byCognitoId") # For Cognito integration
  username: String!
  gameProgresses: [GameProgress] @hasMany(indexName: "byUser", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GameProgress
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  userID: ID! @index(name: "byUser")
  user: User! @belongsTo(fields: ["userID"])
  languageCode: LanguageCode!
  credits: Int!
  currentLevel: Int!
  unlockedLevels: [Int]!
  wordsCompleted: Int!
  wordsSkipped: Int!
  currentStreak: Int!
  bestStreak: Int!
  discoveredWords: [DiscoveredWord]
    @hasMany(indexName: "byGameProgress", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type DiscoveredWord
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  gameProgressID: ID! @index(name: "byGameProgress")
  gameProgress: GameProgress! @belongsTo(fields: ["gameProgressID"])
  wordID: ID!
  word: Word! @hasOne(fields: ["wordID"])
  isDiscovered: Boolean!
  discoveredAt: AWSDateTime!
}

type WordDatabase
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"], operations: [create, update, delete] }
    ]
  ) {
  id: ID! @primaryKey
  languageCode: LanguageCode!
  levels: [Level] @hasMany(indexName: "byWordDatabase", fields: ["id"])
}

type Level
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"], operations: [create, update, delete] }
    ]
  ) {
  id: ID! @primaryKey
  wordDatabaseID: ID! @index(name: "byWordDatabase")
  wordDatabase: WordDatabase! @belongsTo(fields: ["wordDatabaseID"])
  levelNumber: Int!
  words: [Word] @hasMany(indexName: "byLevel", fields: ["id"])
}

type Word
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"], operations: [create, update, delete] }
    ]
  ) {
  id: ID! @primaryKey
  levelID: ID! @index(name: "byLevel")
  level: Level! @belongsTo(fields: ["levelID"])
  word: String!
  hint: String!
  skipCost: Int!
}

enum LanguageCode {
  en
  sn
  nd
}
